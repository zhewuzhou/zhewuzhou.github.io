<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>关系型数据库 on Studying &amp; Blogging</title><link>https://zhewuzhou.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/</link><description>Recent content in 关系型数据库 on Studying &amp; Blogging</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 13 Sep 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://zhewuzhou.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>数据库性能之翼：SQL 语句运行时编译</title><link>https://zhewuzhou.github.io/posts/sql_compilation_technology_for_performance/</link><pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate><guid>https://zhewuzhou.github.io/posts/sql_compilation_technology_for_performance/</guid><description>数据库性能之翼：SQL 语句运行时编译 摘要 现代服务器的一大特点是内存越来越大，对于运行在这些服务器上的数据库，性能的瓶颈是 CPU 而非内存；然而传统 SQL 执行模型即“火山模型” 诞生于内存是瓶颈的年代，其以行为单位的迭代执行过程虽然灵活，但对 CPU 非常不友好。
在这个大背景下，SQL 语句运行时编译技术应运而生，为传统的关系型数据库的 SQL 执行性能插上翅膀。
一些 SQL 编译的实现如下：
Apache Spark Tungsten 引擎运行时将 SQL 语句的 Where 部分转换成抽象语法树，然后再讲抽象语法树运行时编译成 Java 字节码。 Oracle 数据库将 SQL 语句运行时转换为 C\C++ 代码，然后将其编译为机器码。 Postgres 11 中提供了基于 LLVM 的即时编译(JIT) 的 SQL 语句执行引擎。有实验证明 Postgres 上 SQL 语句编译技术能够将 Postgres 的事务处理能力提升20%之500%。 随着 CPU 和多核瓶颈日益凸显，SQL 语句编译技术会成为重要的数据库性能提升技术。希望读者通过本篇博客能够了对 SQL 编译技术有个大概的认识。
为什么要进行 SQL 编译 通用（抽象） vs 定向优化 SQL 是一个非常优秀的抽象模型；对于使用者来讲，SQL 简单易用，不用关心 SQL 背后的诸如存储、同步及先写日志等细节；从而使得：
SQL 可以运行在任何一台计算机上 开发人员不需要关心 SQL 语句的执行过程，通过陈述的方式描述业务逻辑 另外一方面，现代的计算机硬件在不断进步，SQL 语句运行速度的关键是针对这些硬件进行定向优化。</description></item><item><title>SQL：数据世界的通用语</title><link>https://zhewuzhou.github.io/posts/sql_as_universe_language_in_data_world/</link><pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate><guid>https://zhewuzhou.github.io/posts/sql_as_universe_language_in_data_world/</guid><description>目录 摘要 SQL 的现在 Not Only SQL 要水平扩展，也要 SQL 总结 引用
摘要 毫不夸张的说，关系数据库是企业软件系统的核心，企业形形色色信息行为的背后，都有 关系数据库的支撑。
SQL 作为关系型数据库最重要的功能之一，有着悠久的历史。 随着数字化大潮的到来， 关系数据库(SQL) 又面临着新的机遇和挑战。对于 IT 行业的从业人员，了解关系数据库 和 SQL 新的发展，对于解决企业 IT 的核心问题十分必要。
SQL 的现在
Not Only SQL NoSQL 的兴起是对于传统的关系型数据库（SQL) 的最近的一次颠覆尝试。有几个原因导 致了 NoSQL 的兴起：
相对于传统的关系型数据库，NoSQL 更容易为企业提供更好数据库可扩展性，是的企 业能够应对日益增长的庞大的数据量。 相比于传统的关系型数据库，很多优秀的 NoSQL 以开源的形式存在。 很多操作在关系型数据库中没有支持，比如 JSON 数据格式全文搜索。 没有严格的 Schema 限制，因此在很多情况下比较灵活。 然而很快，NoSQL 便暴露除了很多不足：
没有标准的数据查询语言，不同的 NoSQL 提供了不同且不完备的 SQL 替代品；随着 应用程序的演进，应用程序所累积的数据会越来越多，数据之间的关系会变得越来越 复杂，在这种情况下由于 NoSQL 所提供的简单的数据查询语句不成熟且不完备，尤 其是考虑到 NoSQL 没有严格的 Schema 限制的情况下，导致大量的应用程序和数据 库之间的脆弱的胶水代码。 NoSQL 中很多数据处理和聚合实际上都是开发人员在应用程序中手写，相比于 SQL 广泛的标准适用性和成熟的优化方案，NoSQL 在处理数据之间的多对一和多对多关系 以及数据之间的关联时，性能差距非常明显。 人们很快发现，原来 NoSQL 的真正的意思是 Not Only SQL。</description></item></channel></rss>