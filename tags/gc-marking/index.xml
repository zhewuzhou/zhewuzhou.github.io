<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GC-Marking on Studying &amp; Blogging</title><link>https://zhewuzhou.github.io/tags/gc-marking/</link><description>Recent content in GC-Marking on Studying &amp; Blogging</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 27 Aug 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://zhewuzhou.github.io/tags/gc-marking/index.xml" rel="self" type="application/rss+xml"/><item><title>GC 标记算法：从分阶段标记到无停顿标记</title><link>https://zhewuzhou.github.io/posts/gc_marking/</link><pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate><guid>https://zhewuzhou.github.io/posts/gc_marking/</guid><description>摘要 为什么需要关注垃圾回收器？ 垃圾回收关键 - 标记 根集合 CMS 回收器标记 G1 回收器标记 SATB 算法 C4/Z 回收器标记 结论 引用 摘要 垃圾回收作为 Java 语言的重要特性，把开发人员从繁重的内存管理中解放出来，极大的 提高了生产效率。尽管市面上有形形色色不同的垃圾回收器，Hotspot 自带且成熟的有：
Serial GC Parallel GC Parallel Old GC (Parallel Compacting GC) Concurrent Mark &amp;amp; Sweep GC (or “CMS”) Garbage First (G1) GC(Java 9 默认) Oracle 正在开发或者处于试验阶段的垃圾回收有：
ZGC，高吞吐量，低延时的 GC，承诺最大垃圾回收造成的应用暂停时间不大于 10 ms， 无论堆和存活对象大小多少。1 Epsilon GC2 ，测试目的 GC 此外，还有不少非 Oracle 主导的 GC ，比如 Redhat 的 Shenandoah GC3 ，Azul 的 C4 GC 等。</description></item></channel></rss>